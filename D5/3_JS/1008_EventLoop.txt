JS的异步：
    JS是一门单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。
而渲染主线程承担着诸多工作，渲染页面、执行JS都在其中运行。如果使用同步的方式，就极有可
能导致主线程阻塞，从而导致消息队列中的很多其他任务无法得到执行。这样一来，一方面会导致
繁忙的主线程白白的消耗时间，另一方面导致页面无法及时更新，给用户造成卡死现象。
    所以浏览器采用异步的方式来避免。具体做法是当某些任务发生时，比如计时器、网络、事件
监听，主线程将任务交给其他线程处理，自身立即结束任务的执行，转而执行后续代码。当其他线
程完成时，将实现传递的回调函数包装成任务，加入到消息队列的末尾排队，等待主线程调度执行
    在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。


阐述一下JS 的事件循环：
    事件循环又叫做消息循环，是浏览器渲染主线程的工作方式。
在 Chrome的源码中，它开启一个不会结束的 for 循环，每次循环从消息队列中取出第一个任务
执行，而其他线程只需要在合适的时候将任务加入到队列末尾即可。
    过去把消息队列简单分为宏队列和微队列，这种说法目前已无法满足复杂的浏览器环境，取而
代之的是一种更加灵活多变的处理方式。
    根据W3C官方的解释，每个任务有不同的类型，同类型的任务必须在同一个队列，不同的任务可
以属于不同的队列。不同任务队列有不同的优先级，在一次事件循环中，由浏览器自行决定取哪一个
队列的任务。但浏览器中必须有一个微队列，微队列的住务定真宥最高的优先级，必须优先调度执行。

JS中的计时器能做到精确计时吗?为什么?
    不行，因为:
    1．计算机硬件没有原子钟,无法做到精确计时
    2．操作系统的计时函数本身就有少量偏差，由于JS 的计时器最终调用的是探作系统的函数,也
    就携带了这些偏差
    3．按照 W3C的标准，浏览器实现计时器时，如果嵌套层级超过5层，则会带有4毫秒的最少时间，这样
    在计时时间少于4毫秒时又带来了偏差
    4．受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，因此又带来了偏差

