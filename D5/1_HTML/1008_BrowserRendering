块级元素有:div、p、h1~h6、ul、ol、dl、li、dd、table、hr、blockquote、address、table、menu、pre、header、section、aside、footer
行内元素:span、img、a、lable、input、abbr(缩写)、em(强调)、big、cite(引用)、i(斜体)、q(短引用)、textarea、select、small、sub、sup,strong、u(下划线)、button。

Browser Rendering
    1. 解析HTML 生成DOM树 CSSOM树
        主线程解析到link 位置,此时外部的CSS文件还没有下载解析好,主线程不会等待,继续解析后续的HTML。
        这是因为下载和解析CSS 的工作是在预解析线程中进行的。这就是CSS不会阻塞HTML解析的根本原因。

        主线程解析到 script 位置,会停止解析 HTML 等待JS文件下载好。因为JS代码执行过程可能会修改当
        前的DOM数,所以DOM数的生成必须暂停,这是JS会阻塞 HTML 解析的根本原因。
    
    2.样式计算
        主线程会遍历得到的 DOM树,依次为树中的每个节点计算出它最终的样式,称之为Computed Style。
        在这一过程中,很多预设值会变成绝对值,比如red 会变成rgb(255,0,0),相对单位会变成绝对单位,
        比如em会变成pX这一步完成后,会得到一棵带有样式的DOM树。
    
    3.布局
        布局阶段会依次遍历DOM树的每一个节点,计算每个节点的几何信息。例如节点的宽高、相对包含块的位僦闲三置。
        大部分时候,DOM树和布局树并非一—对应。
        比如display:none的节点没有几何信息,因此不会生成到布局树,又比如使用了伪元素选择器,虽然DOM树中不存在这些伪元
        素节点,但它们拥有几何信息,所以会生成到布局时中。还有匿名行盒、匿名块盒等等都会导致DOM树和布局树无法——对应。_

    4.分层
        主线程会使用一套复杂的策略对整个布局树中进行分层
        分层的好处在于,将来某一个层改变后,仅会对该层进行后续处理,从而提升效率。
        滚动条、堆叠上下文、transform、opacity 等样式都会或多或少的影响分层结果,也可以通过will-change属性更大程度的影响分层结果。

    5.绘制
        主线程会为每个层单独产生绘制指令集,用于描述这一层的内容该如何画出来。
        完成绘制后,主线程将每个图层的绘制信息提交给合成线程,剩余工作将由合成线程完成。
        合成线程首先对每个图层进行分块,将其划分为更多的小区域。
        它会从线程池中拿取多个线程来完成分块工作。

    6.分块
    7.光栅化
    8.画

    渲染主线程 parse style layout layer paint 
    合成线程                                  tiling raster draw


reflow(回流)
    指的是当渲染树中的节点信息发生了大小、边距等问题,需要重新计算各节点和css具体的大小和位置。
    例:在css中对一个div修饰的样式中,使用了宽度50%,此时需要将50%转换为具体的像素,这个计算的过程,就是回流的过程。
    1:改变窗口大小
    2:改变文字大小
    3:内容的改变,如用户在输入框中敲字
    4:激活伪类,如:hover
    5:操作class属性
    6:脚本操作DOM
    7:计算offsetWidth和offsetHeight
    8:设置style属性

repaint(重绘)
    当节点的部分属性发生变化,但不影响布局,只需要重新计算节点在屏幕中的绝对位置并渲染的过程,就叫重绘。
    例:改变元素的背景颜色、字体颜色等操作会造成重绘。

优化
    1.用transform 代替 top,left ,margin-top, margin-left... 这些位移属性
    2.批量修改DOM
    3.不要使用Table布局
    4.position属性使用absolute或者fixed
    5.visibility:hidden替换display:none
    6.使用CSS3硬件加速
    7.避免设置多层内联样式